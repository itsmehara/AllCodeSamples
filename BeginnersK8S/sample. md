Yes, you can reconstruct a Kubernetes deployment YAML file based on the kubectl describe deployment output, although it will require some manual effort. The describe output gives you detailed information about the state of the deployment, but it doesn't provide the exact YAML structure. You can extract key pieces of information such as the replicas, image, strategy, and container details to rebuild the deployment file.

Example Workflow:

1. Input (Sample kubectl describe deployment output):



Name:                   istiod
Namespace:              istio-system
CreationTimestamp:      Mon, 18 Oct 2021 13:46:57 +0000
Labels:                 app=istiod
                        istio=pilot
Annotations:            deployment.kubernetes.io/revision: 3
Selector:               app=istiod,istio=pilot
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
Containers:
  istiod:
    Image:              docker.io/istio/pilot:1.8.1
    Port:               8080/TCP
    Host Port:          0/TCP
    Limits:
      cpu:              200m
      memory:           256Mi
    Requests:
      cpu:              100m
      memory:           128Mi
    Liveness:           http-get http://:15014/ready delay=3s timeout=5s period=2s #success=1 #failure=3
    Readiness:          http-get http://:15014/ready delay=3s timeout=5s period=2s #success=1 #failure=3
    Environment:        <none>
    Mounts:
      /etc/certs from istiod-certs (ro)
Volumes:
  istiod-certs:
    Type:               Secret (a volume populated by a Secret)
    SecretName:         istiod-certs
    Optional:           false
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
Events:          <none>

2. Output (Reconstructed Deployment YAML):



apiVersion: apps/v1
kind: Deployment
metadata:
  name: istiod
  namespace: istio-system
  labels:
    app: istiod
    istio: pilot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: istiod
      istio: pilot
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: istiod
        istio: pilot
    spec:
      containers:
      - name: istiod
        image: docker.io/istio/pilot:1.8.1
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /ready
            port: 15014
          initialDelaySeconds: 3
          timeoutSeconds: 5
          periodSeconds: 2
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 15014
          initialDelaySeconds: 3
          timeoutSeconds: 5
          periodSeconds: 2
          failureThreshold: 3
        volumeMounts:
        - name: istiod-certs
          mountPath: /etc/certs
          readOnly: true
      volumes:
      - name: istiod-certs
        secret:
          secretName: istiod-certs

Steps:

Metadata: Extract the deployment name, namespace, and labels.

Spec: Include replica information, labels, and strategy type (RollingUpdate).

Containers: Extract the container name, image, ports, resource limits/requests, and health checks (livenessProbe, readinessProbe).

Volumes and Volume Mounts: Reconstruct any volumes and mounts mentioned in the output (e.g., secret volumes).


The exact deployment YAML can vary based on additional details such as annotations or specific environment variables, so you might need to adjust it further if required.

